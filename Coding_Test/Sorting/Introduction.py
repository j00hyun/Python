################################# 선택 정렬 #################################

# 처리되지 않은 데이터 중에서 가장 작은 데이터를 선택해 맨 앞에 있는 데이터와 바꾸는 것을 반복

# 시간 복잡도 : O(N^2)

# 7   5   9   0   3   1   6   2   4   8 (가장 작은 데이터인 0 선택)
# 0 | 5   9   7   3   1   6   2   4   8 (0을 맨 앞의 7과 변경 -> 5 부터 8 사이에서 가장 작은 데이터인 1 선택)
# 0   1 | 9   7   3   5   6   2   4   8 (1을 처리되지 않은 데이터 중 가장 앞에 있는 5와 변경 -> 9 부터 8 사이에서 가장 작은 데이터인 2 선택)
# 0   1   2 | 7   3   5   6   9   4   8 (2를 처리되지 않은 데이터 중 가장 앞에 있는 9와 변경 -> 7 부터 8 사이에서 가장 작은 데이터인 3 선택)
# ...
# 0   1   2   3   4   5   6   7   8 | 9 (마지막 데이터는 9는 처리하지 않아도 됨)

array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(len(array)):
  min_index = i # 가장 작은 원소의 인덱스
  for j in range(i + 1, len(array)):
    if array[min_index] > array[j]:
      min_index = j
  array[i], array[min_index] = array[min_index], array[i] # 스와프

print(array)

################################# 삽입 정렬 #################################

# 처리되지 않은 데이터를 하나씩 골라 적절한 위치에 삽입
# 선택 정렬에 비해 구현 난이도가 높은 편이지만, 일반적으로 더 효율적으로 동작

# 시간 복잡도 : O(N^2)
#            이미 정렬되어 있는 상태라면 O(N) -> 현재 리스트의 데이터가 거의 정렬되어 있는 상태라면 매우 빠르게 동작

# | 7 | 5   9   0   3   1   6   2   4   8 (5를 한칸씩 왼쪽으로 이동시키며 어떤 위치로 들어갈지 판단 -> 맨 앞으로 이동)
# | 5 | 7 | 9   0   3   1   6   2   4   8 (9를 한칸씩 왼쪽으로 이동 -> 이동 안함)
# | 5 | 7 | 9 | 0   3   1   6   2   4   8 (0를 한칸씩 왼쪽으로 이동 -> 맨 앞으로 이동)
# | 0 | 5 | 7 | 9 | 3   1   6   2   4   8 (3를 한칸씩 왼쪽으로 이동 -> 0과 5 사이로 이동)
# ...
#   0   1   2   3   4   5   6   7   8   9

array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(1, len(array)):
  for j in range(i, 0, -1): # 인덱스 i부터 1까지 1씩 감소하며 반복하는 문법
    if array[j] < array[j - 1]: # 한 칸씩 왼쪽으로 이동
      array[j], array[j - 1] = array[j - 1], array[j]
    else: # 자기보다 작은 데이터를 만나면 그 위치에서 멈춤
      break

print(array)

################################# 퀵 정렬 #################################

# 기준 데이터를 설정하고 그 기준보다 큰 데이터와 작은 데이터의 위치를 바꾸는 방법
# 가장 기본적인 퀵 정렬은 첫 번째 데이터를 기준 데이터(Pivot)로 설정

# 시간 복잡도 : 평균의 경우 O(NlogN)
#            최악의 경우 O(N^2) (첫 번째 원소를 피벗으로 삼을 때, 이미 정렬된 배열에 대해서 퀵 정렬)

# [Step 0] 현재 피벗의 값은 '5'입니다. 
#          왼쪽에서부터 '5'보다 큰 데이터를 선택하므로 '7'이 선택되고, 오른쪽에서부터 '5'보다 작은 데이터를 선택하므로 '4'가 선택됩니다.
#          이제 이 두 데이터의 위치를 서로 변경합니다.
#          | 5 | 7 | 9   0   3   1   6   2 | 4 | 8
# [Step 1] 현재 피벗의 값은 '5'입니다.
#          왼쪽에서부터 '5'보다 큰 데이터를 선택하므로 '9'가 선택되고, 오른쪽에서부터 '5'보다 작은 데이터를 선택하므로 '2'가 선택됩니다.
#          이제 이 두 데이터의 위치를 서로 변경합니다.
#          | 5 | 4 | 9 | 0   3   1   6 | 2 | 7   8
# [Step 2] 현재 피벗의 값은 '5'입니다.
#          왼쪽에서부터 '5'보다 큰 데이터를 선택하므로 '6'이 선택되고, 오른쪽에서부터 '5'보다 작은 데이터를 선택하므로 '1'이 선택됩니다.
#          단, 이처럼 위치가 엇갈리는 경우 '피벗'과 '작은 데이터'의 위치를 서로 변경합니다.
#          | 5 | 4   2   0   3 | 1 | 6 | 9   7   8
# [분할 완료] 이제 '5'의 왼쪽에 있는 데이터는 모두 5보다 작고, 오른쪽에 있는 데이터는 모두 '5'보다 크다는 특징이 있습니다.
#          이렇게 피벗을 기준으로 데이터 묶음을 나누는 작업을 분할(Divide)이라고 합니다.
#            1   4   2   0   3 | 5 | 6   9   7   8
# [왼쪽 데이터 묶음 정렬] 왼쪽에 있는 데이터에 대해서 마찬가지로 정렬을 수행합니다.
#            1   4   2   0   3
# [오른쪽 데이터 묶음 정렬] 오른쪽에 있는 데이터에 대해서 마찬가지로 정렬을 수행합니다.
#            6   9   7   8
# 이러한 과정을 반복하면 전체 데이터에 대해서 정렬이 수행됩니다.

array = [5, 7, 9, 0, 3, 1, 6, 2, 4, 8]

def quick_sort(array, start, end):
  if start >= end: # 원소가 1개인 경우 종료
    return
  pivot = start # 피벗은 첫 번째 원소
  left = start + 1
  right = end
  while(left <= right):
    # 피벗보다 큰 데이터를 찾을 때까지 반복
    while(left <= end and array[left] <= array[pivot]):
      left += 1
    # 피벗보다 작은 데이터를 찾을 때까지 반복
    while(right > start and array[right] >= array[pivot]):
      right -= 1
    if(left > right): # 엇갈렸다면 작은 데이터와 피벗을 교체
      array[right], array[pivot] = array[pivot], array[right]
    else: # 엇갈리지 않았다면 작은 데이터와 큰 데이터를 교체
      array[left], array[right] = array[right], array[left]
  # 분할 이후 왼쪽 부분과 오른쪽 부분에서 각각 정렬 수행
  quick_sort(array, start, right - 1)
  quick_sort(array, right + 1, end)

quick_sort(array, 0, len(array) - 1)
print(array)

# 파이썬의 장점을 살린 방식
array = [5, 7, 9, 0, 3, 1, 6, 2, 4, 8]

def quick_sort(array):
  # 리스트가 하나 이하의 원소만을 담고 있다면 종료
  if len(array) <= 1:
    return array
  pivot = array[0] # 피벗은 첫 번째 원소
  tail = array[1:] # 피벗을 제외한 리스트

  left_side = [x for x in tail if x <= pivot] # 분할된 왼쪽 부분
  right_side = [x for x in tail if x > pivot] # 분할된 오른쪽 부분

  # 분할 이후 왼쪽 부분과 오른쪽 부분에서 각각 정렬을 수행하고, 전체 리스트 반환
  return quick_sort(left_side) + [pivot] + quick_sort(right_side)

print(quick_sort(array))

################################# 계수 정렬 #################################

# 계수 정렬은 데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때 사용 가능하며 매우 빠르게 동작
# 동일한 값을 가지는 데이터가 여러개 등장할 때 효과적

# 시간 복잡도, 공간 복잡도 : 데이터의 개수가 N, 데이터(양수) 중 최댓값이 K일 때 O(N + K)

# 가장 작은 데이터부터 가장 큰 데이터까지의 범위가 모두 담길 수 있도록 리스트 생성
# 데이터를 하나씩 확인하며 데이터의 값과 동일한 인덱스의 데이터를 1씩 증가시킴
#   정렬할 데이터: 7 5 9 0 3 1 6 2 9 1 4 8 0 5 2
#   리스트 인덱스: 0 1 2 3 4 5 6 7 8 9
#   개수(Count): 2 2 2 1 1 2 1 1 1 2
# 결과적으로 최종 리스트에는 각 데이터가 몇 번씩 등작했는지 그 횟수가 기록됨
# 리스트의 첫 번째 데이터부터 하나씩 그 값만큼 반복하여 인덱스를 출력
#   출력 결과   : 0 0 1 1 2 2 3 4 5 5 6 7 8 9 9

# 모든 원소의 값이 0보다 크거나 같다고 가정
array = [7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8, 0, 5, 2]
# 모든 범위를 포함하는 리스트 선언(모든 값은 0으로 초기화)
count = [0] * (max(array) + 1)

for i in range(len(array)):
  count[array[i]] += 1 # 각 데이터에 해당하는 인덱스의 값 증가

for i in range(len(count)): # 리스트에 기록된 정렬 정보 확인
  for j in range(count[i]):
    print(i, end=' ') # 띄어쓰기를 구분으로 등장한 횟수만큼 인덱스 출력
