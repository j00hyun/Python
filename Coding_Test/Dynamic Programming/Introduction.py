# 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방법

############################### 다이나믹 프로그래밍의 조건 ############################
#   1. 최적 부분 구조 (Optimal Substructure)
#      큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있습니다.
#   2. 중복되는 부분 문제 (Overlapping Subproblem)
#      동일한 작은 문제를 반복적으로 해결해야 합니다.

############################# 메모이제이션 (Memoization) ###########################
#   한번 계산한 결과를 메모리 공간에 메모

################################# 탑다운 VS 보텀업 #################################
#   탑다운(메모이제이션): 재귀함수로 구현
#   보텀업: 반복문으로 구현

########################## 다이나믹 프로그래밍 VS 분할 정복 ############################

# 다이나믹 프로그래밍: 최적 부분 구조 & 부분 문제의 중복
# 분할 정복: 최적 부분 구조만 가짐 (동일한 부분 문제가 반복적으로 계산되지 않음)
#          ex) 퀵 정렬: 한번 기준 원소(Pivot)가 자리를 변경해서 자리를 잡으면 그 기준 원소의 위치는 바뀌지 않습니다.
#                      (분할 이후에 해당 피벗을 다시 처리하는 부분 문제는 호출하지 않습니다.)

######################## 다이나믹 프로그래밍 문제에 접근하는 방법 #########################

# 가장 먼저 그리디, 구현, 완전 탐색 등의 아이디어로 문제를 해결할 수 있는지 검토 후 다른 알고리즘으로 풀이 방법이 떠오르지 않으면 다이나믹 프로그래밍 고려
# 일단 재귀 함수로 비효율적인 완전 탐색 프로그램을 작성한 뒤에 (탑다운) 작은 문제에서 구한 답이 큰 문제에서 그대로 사용될 수 있으면, 코드를 개선하는 방법을 사용

################################## 피보나치 수열 ####################################
# 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

#        f(4)
#       /    \
#    f(3)    f(2)
#    /   \
# f(2)   f(1)

###### 피보나치 함수(Fibonacci Function)을 재귀함수로 구현
# 시간 복잡도: O(2^N)
def fibo(x):
  if x == 1 or x == 2:
    return 1
  return fibo(x - 1) + fibo(x - 2)

# f(2)가 여러 번 호출됨 (중복되는 부분 문제)
fibo(4) # 3

##### 탑다운 다이나믹 프로그래밍 소스코드
# 시간 복잡도: O(N)
# 재귀함수는 DFS 형식으로 동작

# 한 번 계산된 결과를 메모이제이션(Memoization)하기 위한 리스트 초기화
d = [0] * 100

# 피보나치 함수(Fibonacci Function)를 재귀함수로 구현(탑다운 다이나믹 프로그래밍)
def fibo(x):
  # 종료 조건 (1 혹은 2일 때 1을 반환)
  if x == 1 or x == 2:
    return 1
  # 이미 계산한 적 있는 문제라면 그대로 반환
  if d[x] != 0:
    return d[x]
  # 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
  d[x] = fibo(x - 1) + fibo(x - 2)
  return d[x]

fibo(99) # 218922995834555169026

##### 보텀업 다이나믹 프로그래밍 소스코드
# 앞서 계산한 결과를 저장하기 위한 DP 테이블 초기화
d = [0] * 100

# 첫 번째 피보나치 수와 두 번째 피보나치 수는 1
d[1] = 1
d[2] = 1
n = 99

# 피보나치 함수(Fibonacci Function) 반복문으로 구현(보텀업 다이나믹 프로그래밍)
for i in range(3, n + 1):
  d[i] = d[i - 1] + d[i - 2]

d[n] # 218922995834555169026