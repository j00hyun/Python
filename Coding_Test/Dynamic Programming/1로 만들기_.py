##### 문제
#   정수 X가 주어졌을 때, 정수 X에 사용할 수 있는 연산은 다음과 같이 4가지입니다.
#     1. X가 5로 나누어 떨어지면, 5로 나눕니다.
#     2. X가 3으로 나누어 떨어지면, 3으로 나눕니다.
#     3. X가 2로 나누어 떨어지면, 2로 나눕니다.
#     4. X에서 1을 뺍니다.

#   정수 X가 주어졌을 때, 연산 4개를 적절히 사용해서 값을 1로 만들고자 합니다.
#   연산을 사용하는 횟수의 최솟값을 출력하세요.
#   예를 들어 정수가 26이면 다음과 같이 계산해서 3번의 연산이 최솟값입니다.
#     26 -> 25 -> 5 -> 1

# 입력 조건: 첫째 줄에 정수 X가 주어집니다. (1 <= X <= 30,000)
# 출력 조건: 첫째 줄에 연산을 하는 횟수의 최솟값을 출력합니다.
# 입력 예시: 26
# 출력 예시: 3

##### 내 풀이
from collections import deque

x = int(input()) # 정수 X
queue = deque()
queue.append((x, 0)) # 정수 X와 현재 연산 횟수 0을 큐에 삽입

# BFS
while queue:
  num, depth = queue.popleft() # 현재 정수 값과 연산 횟수
  
  # 현재 정수 값이 1이라면 연산 횟수 출력
  if num == 1:
    print(depth)
    break

  if num % 5 == 0: # 1. X가 5로 나누어 떨어지면, 5로 나눈 값과 현재 연산 횟수 + 1을 큐에 저장
    queue.append((num // 5, depth + 1))
  if num % 3 == 0: # 2. X가 3로 나누어 떨어지면, 3로 나눕니다.
    queue.append((num // 3, depth + 1))
  if num % 2 == 0: # 3. X가 2로 나누어 떨어지면, 2로 나눕니다.
    queue.append((num // 2, depth + 1))
  queue.append((num - 1, depth + 1)) # 4. X에서 1을 뺍니다.

##### 모범답안
# 정수 X를 입력받기
x = int(input())

# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [0] * 30001

# 다이나믹 프로그래밍 진행 (보텀업)
for i in range(2, x + 1):
  # 현재의 수에서 1을 빼는 경우
  d[i] = d[i - 1] + 1
  # 현재의 수가 2로 나누어 떨어지는 경우
  if i % 2 == 0:
    d[i] = min(d[i], d[i // 2] + 1)
  # 현재의 수가 3으로 나누어 떨어지는 경우
  if i % 3 == 0:
    d[i] == min(d[i], d[i // 3] + 1)
  # 현재의 수가 5로 나누어 떨어지는 경우
  if i % 5 == 0:
    d[i] == min(d[i], d[i // 5] + 1)

print(d[x])